{"version":3,"sources":["componnents/Header.js","context/AppReducer.js","context/GlobalState.js","componnents/Balance.js","componnents/IncomeExpenses.js","componnents/Transaction.js","componnents/TransactionList.js","componnents/AddTransaction.js","App.js","serviceWorker.js","index.js"],"names":["Header","state","action","type","transactions","filter","transaction","id","payload","initialState","GlobalContext","createContext","GlobalProvider","children","useReducer","AppReducer","dispatch","Provider","value","deleteTransaction","addTransaction","Balance","total","useContext","map","amount","reduce","acc","item","toFixed","IncomeExpenses","amounts","income","expense","className","Transaction","sign","text","Math","abs","onClick","TransactionList","key","AddTransaction","useState","setText","setAmount","onSubmit","e","preventDefault","newTransaction","floor","random","htmlFor","onChange","target","placeholder","required","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e4e56d54.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport const Header = () => {\r\n    return (\r\n        <h2>\r\n            Espense Tracker\r\n        </h2>\r\n    )\r\n}\r\n","export default (state,action)=>{\r\n    switch(action.type){\r\n        case \"DELETE_TRANSACTIONS\":\r\n            return {\r\n                ...state,\r\n                transactions: state.transactions.filter(transaction => transaction.id !== action.payload)\r\n            }\r\n            case \"ADD_TRANSACTIONS\":\r\n                return {\r\n                    ...state,\r\n                    transactions:[action.payload,...state.transactions]\r\n                }\r\n        default:\r\n     return state;\r\n    }\r\n}","import React,{createContext,useReducer} from \"react\";\r\nimport AppReducer from \"./AppReducer\"\r\n\r\n//Initial state\r\nconst initialState = {\r\n    transactions:[]\r\n}\r\n// Create context\r\nexport const GlobalContext = createContext(initialState);\r\n\r\n//Provider componnet\r\nexport const GlobalProvider = ({children})=>{\r\n    const [state,dispatch] = useReducer(AppReducer,initialState)\r\n    \r\n\r\n    // useEffect(() => {\r\n    //     localStorage.setItem('state',JSON.stringify(state))\r\n    // }, [state])\r\n\r\n    //Actions\r\n    function deleteTransaction(id){\r\n        dispatch({\r\n            type:\"DELETE_TRANSACTIONS\" ,\r\n            payload:id\r\n        });\r\n    }\r\n\r\n    function addTransaction(transaction){\r\n        dispatch({\r\n            type:\"ADD_TRANSACTIONS\" ,\r\n            payload:transaction\r\n        });\r\n    }\r\n\r\n    \r\n\r\n    return(<GlobalContext.Provider value={{\r\n        transactions:state.transactions,\r\n        deleteTransaction,\r\n        addTransaction\r\n    }}>\r\n        {children}\r\n    </GlobalContext.Provider>);\r\n}","import React,{useContext} from 'react'\r\nimport {GlobalContext} from \"../context/GlobalState\";\r\n\r\nexport const Balance = () => {\r\n    const {transactions} = useContext(GlobalContext);\r\n\r\n    const amounts = transactions.map(transaction=>transaction.amount);\r\n  \r\n    \r\n    \r\n    const total = amounts.reduce((acc,item)=>(acc+=item),0).toFixed(2);\r\n   \r\n\r\n    return (\r\n        <div>\r\n            <h4>Your Balance</h4>\r\n            <h1>${total}</h1>\r\n        </div>\r\n    )\r\n}\r\n","import React,{useContext} from 'react';\r\nimport {GlobalContext} from \"../context/GlobalState\";\r\n\r\nexport const IncomeExpenses = () => {\r\n  const {transactions} = useContext(GlobalContext);\r\n\r\n  const amounts = transactions.map(transaction=>transaction.amount);\r\n\r\n  const income = amounts.filter(item=>item>0).reduce((acc,item)=>(acc+=item),0).toFixed(2);\r\n\r\n  const expense = amounts.filter(item=>item<0).reduce((acc,item)=>(acc+=item),0).toFixed(2);\r\n    return (\r\n     <div className=\"inc-exp-container\">\r\n      <div>\r\n          <h4>Income</h4>\r\n          <p className=\"money plus\">${income}</p>\r\n        </div>\r\n        <div>\r\n          <h4>Expense</h4>\r\n         <p className=\"money minus\">-${expense}</p>\r\n      </div>\r\n      </div>\r\n    )\r\n}\r\n","import React,{useContext} from 'react';\r\nimport {GlobalContext} from \"../context/GlobalState\";\r\n\r\nexport const Transaction = ({transaction}) => {\r\n    const {deleteTransaction} = useContext(GlobalContext);\r\n    const sign = transaction.amount<0?'-':'+';\r\n\r\n    return (\r\n        < li className = {transaction.amount < 0 ? \"minus\" : \"plus\"} >\r\n            \r\n         {transaction.text} <span>{sign}${Math.abs(transaction.amount)}</span><button \r\n         onClick={()=>deleteTransaction(transaction.id)} className=\"delete-btn\">x</button>\r\n         </li>\r\n    )\r\n}\r\n","import React,{useContext} from 'react';\r\nimport {GlobalContext} from \"../context/GlobalState\";\r\nimport {Transaction} from \"./Transaction\"\r\n\r\nexport const TransactionList = () => {\r\n    const {transactions} = useContext(GlobalContext);\r\n\r\n   \r\n    return (\r\n        <>\r\n            <h3>History</h3>\r\n            <ul className=\"list\">\r\n            {transactions.map(transaction=>(<Transaction key={transaction.id} transaction={transaction}/> ))}\r\n\r\n            </ul>\r\n        </>\r\n    )\r\n}\r\n","import React, {useState, useContext} from 'react'\r\nimport { GlobalContext } from '../context/GlobalState';\r\n\r\nexport const AddTransaction = () => {\r\n  const [text, setText] = useState('');\r\n  const [amount, setAmount] = useState();\r\n\r\n  const { addTransaction } = useContext(GlobalContext);\r\n\r\n  const onSubmit = e => {\r\n    e.preventDefault();\r\n    if(text===\"\"){\r\n      return;\r\n    }\r\n\r\n    const newTransaction = {\r\n      \r\n      id: Math.floor(Math.random() * 100000000),\r\n      text,\r\n      amount:+amount\r\n    }\r\n\r\n    addTransaction(newTransaction);\r\n    setText(\"\");\r\n    setAmount(\"\");\r\n    \r\n  }\r\n\r\n  return (\r\n    <>\r\n      <h3>Add new transaction</h3>\r\n      <form onSubmit={onSubmit}>\r\n        <div className=\"form-control\">\r\n          <label htmlFor=\"text\">Text</label>\r\n          <input type=\"text\" value={text} \r\n          onChange={(e) => setText(e.target.value)} placeholder=\"Enter text...\"  required/>\r\n        </div>\r\n        <div className=\"form-control\">\r\n          <label htmlFor=\"amount\"\r\n            >Amount <br />\r\n            (negative - expense, positive - income)</label\r\n          >\r\n          <input type=\"number\" value={amount} \r\n          onChange={(e) => setAmount(e.target.value)} placeholder=\"Enter amount...\" required/>\r\n        </div>\r\n        <button className=\"btn\">Add transaction</button>\r\n      </form>\r\n    </>\r\n  )\r\n}","import React from 'react';\nimport {Header} from \"./componnents/Header\";\nimport {Balance} from \"./componnents/Balance\";\nimport {IncomeExpenses} from \"./componnents/IncomeExpenses\";\nimport {TransactionList} from \"./componnents/TransactionList\";\nimport {AddTransaction} from \"./componnents/AddTransaction\";\nimport {GlobalProvider} from \"./context/GlobalState\";\n\nimport \"./App.css\"\n\nfunction App() {\n  return (\n    <GlobalProvider >\n      <Header/>\n      <div className=\"container\">\n    <Balance/>\n    <IncomeExpenses/>\n    <TransactionList/>\n    <AddTransaction/>\n      </div>\n    </GlobalProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}