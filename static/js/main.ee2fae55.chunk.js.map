{"version":3,"sources":["componnents/Header.js","context/AppReducer.js","context/GlobalState.js","utils/format.js","componnents/Balance.js","componnents/IncomeExpenses.js","componnents/Transaction.js","componnents/TransactionList.js","componnents/AddTransaction.js","App.js","serviceWorker.js","index.js"],"names":["Header","state","action","type","transactions","filter","transaction","id","payload","initialState","GlobalContext","createContext","GlobalProvider","children","useReducer","AppReducer","dispatch","Provider","value","deleteTransaction","addTransaction","numberWithCommas","x","toString","replace","Balance","total","useContext","map","amount","reduce","acc","item","toFixed","IncomeExpenses","amounts","income","expense","className","Transaction","sign","text","Math","abs","onClick","TransactionList","key","AddTransaction","useState","setText","setAmount","onSubmit","e","preventDefault","newTransaction","floor","random","htmlFor","onChange","target","placeholder","required","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4PAEaA,G,MAAS,WAClB,OACI,iD,qBCJO,WAACC,EAAMC,GAClB,OAAOA,EAAOC,MACV,IAAK,sBACD,OAAO,eACAF,EADP,CAEIG,aAAcH,EAAMG,aAAaC,QAAO,SAAAC,GAAW,OAAIA,EAAYC,KAAOL,EAAOM,aAErF,IAAK,mBACD,OAAO,eACAP,EADP,CAEIG,aAAa,CAACF,EAAOM,SAAT,mBAAoBP,EAAMG,iBAElD,QACH,OAAOH,ICTNQ,EAAe,CACjBL,aAAa,IAGJM,EAAgBC,wBAAcF,GAG9BG,EAAiB,SAAC,GAAc,IAAbC,EAAY,EAAZA,SAAY,EACfC,qBAAWC,EAAWN,GADP,mBACjCR,EADiC,KAC3Be,EAD2B,KAyBxC,OAAO,kBAACN,EAAcO,SAAf,CAAwBC,MAAO,CAClCd,aAAaH,EAAMG,aACnBe,kBAlBJ,SAA2BZ,GACvBS,EAAS,CACLb,KAAK,sBACLK,QAAQD,KAgBZa,eAZJ,SAAwBd,GACpBU,EAAS,CACLb,KAAK,mBACLK,QAAQF,OAWXO,ICzCF,SAASQ,EAAiBC,GAC7B,OAAOA,EAAEC,WAAWC,QAAQ,wBAAyB,KCGlD,IAAMC,EAAU,WAAO,IAOpBC,EANiBC,qBAAWjB,GAA3BN,aAEsBwB,KAAI,SAAAtB,GAAW,OAAEA,EAAYuB,UAIpCC,QAAO,SAACC,EAAIC,GAAL,OAAaD,EAAKC,IAAM,GAAGC,QAAQ,GAGhE,OACI,6BACI,4CACA,gCAAMZ,EAAiBK,MCbtBQ,EAAiB,WAAO,IAG7BC,EAFiBR,qBAAWjB,GAA3BN,aAEsBwB,KAAI,SAAAtB,GAAW,OAAEA,EAAYuB,UAEpDO,EAASD,EAAQ9B,QAAO,SAAA2B,GAAI,OAAEA,EAAK,KAAGF,QAAO,SAACC,EAAIC,GAAL,OAAaD,EAAKC,IAAM,GAAGC,QAAQ,GAEhFI,EAAUF,EAAQ9B,QAAO,SAAA2B,GAAI,OAAEA,EAAK,KAAGF,QAAO,SAACC,EAAIC,GAAL,OAAaD,EAAKC,IAAM,GAAGC,QAAQ,GACrF,OACC,yBAAKK,UAAU,qBACd,6BACI,sCACA,uBAAGA,UAAU,cAAb,IAA4BjB,EAAiBe,KAE/C,6BACE,uCACD,uBAAGE,UAAU,eAAb,KAA8BjB,EAAiBgB,OChB3CE,EAAc,SAAC,GAAmB,IAAlBjC,EAAiB,EAAjBA,YAClBa,EAAqBQ,qBAAWjB,GAAhCS,kBACDqB,EAAOlC,EAAYuB,OAAO,EAAE,IAAI,IAEtC,OACI,wBAAKS,UAAahC,EAAYuB,OAAS,EAAI,QAAU,QAEnDvB,EAAYmC,KAFd,IAEoB,8BAAOD,EAAP,IAAcnB,EAAiBqB,KAAKC,IAAIrC,EAAYuB,UAAgB,4BACvFe,QAAS,kBAAIzB,EAAkBb,EAAYC,KAAK+B,UAAU,cAD6B,OCPnFO,EAAkB,WAAO,IAC3BzC,EAAgBuB,qBAAWjB,GAA3BN,aAGP,OACI,oCACI,uCACA,wBAAIkC,UAAU,QACblC,EAAawB,KAAI,SAAAtB,GAAW,OAAG,kBAAC,EAAD,CAAawC,IAAKxC,EAAYC,GAAID,YAAaA,UCT9EyC,EAAiB,WAAO,IAAD,EACVC,mBAAS,IADC,mBAC3BP,EAD2B,KACrBQ,EADqB,OAEND,qBAFM,mBAE3BnB,EAF2B,KAEnBqB,EAFmB,KAI1B9B,EAAmBO,qBAAWjB,GAA9BU,eAqBR,OACE,oCACE,mDACA,0BAAM+B,SAtBO,SAAAC,GAEf,GADAA,EAAEC,iBACQ,KAAPZ,EAAH,CAIA,IAAMa,EAAiB,CAErB/C,GAAImC,KAAKa,MAAsB,IAAhBb,KAAKc,UACpBf,OACAZ,QAAQA,GAGVT,EAAekC,GACfL,EAAQ,IACRC,EAAU,OAQN,yBAAKZ,UAAU,gBACb,2BAAOmB,QAAQ,QAAf,QACA,2BAAOtD,KAAK,OAAOe,MAAOuB,EAC1BiB,SAAU,SAACN,GAAD,OAAOH,EAAQG,EAAEO,OAAOzC,QAAQ0C,YAAY,gBAAiBC,UAAQ,KAEjF,yBAAKvB,UAAU,gBACb,2BAAOmB,QAAQ,UAAf,UACU,6BADV,2CAIA,2BAAOtD,KAAK,SAASe,MAAOW,EAC5B6B,SAAU,SAACN,GAAD,OAAOF,EAAUE,EAAEO,OAAOzC,QAAQ0C,YAAY,kBAAkBC,UAAQ,KAEpF,4BAAQvB,UAAU,OAAlB,sB,MCrBOwB,MAdf,WACE,OACE,kBAAC,EAAD,KACE,kBAAC,EAAD,MACA,yBAAKxB,UAAU,aACjB,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,SCNgByB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.ee2fae55.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport const Header = () => {\r\n    return (\r\n        <h2>\r\n            Espense Tracker\r\n        </h2>\r\n    )\r\n}\r\n","export default (state,action)=>{\r\n    switch(action.type){\r\n        case \"DELETE_TRANSACTIONS\":\r\n            return {\r\n                ...state,\r\n                transactions: state.transactions.filter(transaction => transaction.id !== action.payload)\r\n            }\r\n            case \"ADD_TRANSACTIONS\":\r\n                return {\r\n                    ...state,\r\n                    transactions:[action.payload,...state.transactions]\r\n                }\r\n        default:\r\n     return state;\r\n    }\r\n}","import React,{createContext,useReducer} from \"react\";\r\nimport AppReducer from \"./AppReducer\"\r\n\r\n//Initial state\r\nconst initialState = {\r\n    transactions:[]\r\n}\r\n// Create context\r\nexport const GlobalContext = createContext(initialState);\r\n\r\n//Provider componnet\r\nexport const GlobalProvider = ({children})=>{\r\n    const [state,dispatch] = useReducer(AppReducer,initialState)\r\n    \r\n\r\n    // useEffect(() => {\r\n    //     localStorage.setItem('state',JSON.stringify(state))\r\n    // }, [state])\r\n\r\n    //Actions\r\n    function deleteTransaction(id){\r\n        dispatch({\r\n            type:\"DELETE_TRANSACTIONS\" ,\r\n            payload:id\r\n        });\r\n    }\r\n\r\n    function addTransaction(transaction){\r\n        dispatch({\r\n            type:\"ADD_TRANSACTIONS\" ,\r\n            payload:transaction\r\n        });\r\n    }\r\n\r\n    \r\n\r\n    return(<GlobalContext.Provider value={{\r\n        transactions:state.transactions,\r\n        deleteTransaction,\r\n        addTransaction\r\n    }}>\r\n        {children}\r\n    </GlobalContext.Provider>);\r\n}","export function numberWithCommas(x) {\r\n    return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\r\n}","import React,{useContext} from 'react'\r\nimport {GlobalContext} from \"../context/GlobalState\";\r\nimport {numberWithCommas} from \"../utils/format\";\r\n\r\nexport const Balance = () => {\r\n    const {transactions} = useContext(GlobalContext);\r\n\r\n    const amounts = transactions.map(transaction=>transaction.amount);\r\n  \r\n    \r\n    \r\n    const total = amounts.reduce((acc,item)=>(acc+=item),0).toFixed(2);\r\n   \r\n\r\n    return (\r\n        <div>\r\n            <h4>Your Balance</h4>\r\n            <h1>${numberWithCommas(total)}</h1>\r\n        </div>\r\n    )\r\n}\r\n","import React,{useContext} from 'react';\r\nimport {GlobalContext} from \"../context/GlobalState\";\r\nimport {numberWithCommas} from \"../utils/format\";\r\n\r\nexport const IncomeExpenses = () => {\r\n  const {transactions} = useContext(GlobalContext);\r\n\r\n  const amounts = transactions.map(transaction=>transaction.amount);\r\n\r\n  const income = amounts.filter(item=>item>0).reduce((acc,item)=>(acc+=item),0).toFixed(2);\r\n\r\n  const expense = amounts.filter(item=>item<0).reduce((acc,item)=>(acc+=item),0).toFixed(2);\r\n    return (\r\n     <div className=\"inc-exp-container\">\r\n      <div>\r\n          <h4>Income</h4>\r\n          <p className=\"money plus\">${numberWithCommas(income)}</p>\r\n        </div>\r\n        <div>\r\n          <h4>Expense</h4>\r\n         <p className=\"money minus\">-${numberWithCommas(expense)}</p>\r\n      </div>\r\n      </div>\r\n    )\r\n}\r\n","import React,{useContext} from 'react';\r\nimport {GlobalContext} from \"../context/GlobalState\";\r\nimport {numberWithCommas} from \"../utils/format\";\r\n\r\nexport const Transaction = ({transaction}) => {\r\n    const {deleteTransaction} = useContext(GlobalContext);\r\n    const sign = transaction.amount<0?'-':'+';\r\n\r\n    return (\r\n        < li className = {transaction.amount < 0 ? \"minus\" : \"plus\"} >\r\n            \r\n         {transaction.text} <span>{sign}${numberWithCommas(Math.abs(transaction.amount))}</span><button \r\n         onClick={()=>deleteTransaction(transaction.id)} className=\"delete-btn\">x</button>\r\n         </li>\r\n    )\r\n}\r\n","import React,{useContext} from 'react';\r\nimport {GlobalContext} from \"../context/GlobalState\";\r\nimport {Transaction} from \"./Transaction\"\r\n\r\nexport const TransactionList = () => {\r\n    const {transactions} = useContext(GlobalContext);\r\n\r\n   \r\n    return (\r\n        <>\r\n            <h3>History</h3>\r\n            <ul className=\"list\">\r\n            {transactions.map(transaction=>(<Transaction key={transaction.id} transaction={transaction}/> ))}\r\n\r\n            </ul>\r\n        </>\r\n    )\r\n}\r\n","import React, {useState, useContext} from 'react'\r\nimport { GlobalContext } from '../context/GlobalState';\r\n\r\nexport const AddTransaction = () => {\r\n  const [text, setText] = useState('');\r\n  const [amount, setAmount] = useState();\r\n\r\n  const { addTransaction } = useContext(GlobalContext);\r\n\r\n  const onSubmit = e => {\r\n    e.preventDefault();\r\n    if(text===\"\"){\r\n      return;\r\n    }\r\n\r\n    const newTransaction = {\r\n      \r\n      id: Math.floor(Math.random() * 100000000),\r\n      text,\r\n      amount:+amount\r\n    }\r\n\r\n    addTransaction(newTransaction);\r\n    setText(\"\");\r\n    setAmount(\"\");\r\n    \r\n  }\r\n\r\n  return (\r\n    <>\r\n      <h3>Add new transaction</h3>\r\n      <form onSubmit={onSubmit}>\r\n        <div className=\"form-control\">\r\n          <label htmlFor=\"text\">Text</label>\r\n          <input type=\"text\" value={text} \r\n          onChange={(e) => setText(e.target.value)} placeholder=\"Enter text...\"  required/>\r\n        </div>\r\n        <div className=\"form-control\">\r\n          <label htmlFor=\"amount\"\r\n            >Amount <br />\r\n            (negative - expense, positive - income)</label\r\n          >\r\n          <input type=\"number\" value={amount} \r\n          onChange={(e) => setAmount(e.target.value)} placeholder=\"Enter amount...\" required/>\r\n        </div>\r\n        <button className=\"btn\">Add transaction</button>\r\n      </form>\r\n    </>\r\n  )\r\n}","import React from 'react';\r\nimport {Header} from \"./componnents/Header\";\r\nimport {Balance} from \"./componnents/Balance\";\r\nimport {IncomeExpenses} from \"./componnents/IncomeExpenses\";\r\nimport {TransactionList} from \"./componnents/TransactionList\";\r\nimport {AddTransaction} from \"./componnents/AddTransaction\";\r\nimport {GlobalProvider} from \"./context/GlobalState\";\r\n\r\nimport \"./App.css\"\r\n\r\nfunction App() {\r\n  return (\r\n    <GlobalProvider >\r\n      <Header/>\r\n      <div className=\"container\">\r\n    <Balance/>\r\n    <IncomeExpenses/>\r\n    <TransactionList/>\r\n    <AddTransaction/>\r\n      </div>\r\n    </GlobalProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}